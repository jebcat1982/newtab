// Generated by CoffeeScript 1.9.3
(function() {
  var Button, Settings,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  Button = (function() {
    Button._buttons = {};

    Button.find = function(id) {
      return this._buttons[id];
    };

    function Button(bookmark1) {
      this.bookmark = bookmark1;
      this.onDrop = bind(this.onDrop, this);
      this.onPinChange = bind(this.onPinChange, this);
      this.onColorChange = bind(this.onColorChange, this);
      Button._buttons[this.bookmark.id] = this;
      this.generateElements();
      this.applySettings();
    }

    Button.prototype.generateElements = function() {
      var color, j, len, opt, ref;
      this.li = $('<li>').attr('id', "bookmark-" + this.bookmark.id);
      this.link = $('<a>').click(this.onClick);
      this.img_div = $('<div>').attr('class', 'link-image').bind('dragenter', this.onDragEnter).bind('dragleave', this.onDragLeave).bind('dragover', this.onDragOver).bind('drop', this.onDrop);
      this.setting_div = $('<div>').attr('class', 'settings');
      this.color_select = $('<select>').change(this.onColorChange);
      ref = Settings.COLORS;
      for (j = 0, len = ref.length; j < len; j++) {
        color = ref[j];
        opt = $('<option>').text(color);
        this.color_select.append(opt);
      }
      this.pin_label = $('<label>').text('Pinned').attr('class', 'pinlabel');
      this.pin_check = $('<input>').attr('type', 'checkbox').change(this.onPinChange);
      this.li.append(this.link);
      this.link.append(this.img_div);
      this.li.append(this.setting_div);
      this.setting_div.append(this.color_select);
      this.setting_div.append(this.pin_label);
      return this.pin_label.append(this.pin_check);
    };

    Button.prototype.onColorChange = function(event) {
      var settings, val;
      val = $(event.target).val();
      this.link.attr('class', val);
      settings = new Settings(this.bookmark);
      return settings.save('color', val);
    };

    Button.prototype.onPinChange = function(event) {
      var checked, settings;
      checked = $(event.target).attr('checked') === 'checked';
      this.link.data('pinned', checked);
      settings = new Settings(this.bookmark);
      return settings.save('pinned', checked);
    };

    Button.prototype.onClick = function(event) {
      if ($(this).data('pinned')) {
        if (event.which === 1 && !event.metaKey && !event.shiftKey) {
          chrome.tabs.getCurrent(function(tab) {
            return chrome.tabs.update(tab.id, {
              'pinned': true
            });
          });
          return;
        }
        chrome.tabs.create({
          'pinned': true,
          'selected': false,
          'url': $(this).attr("href")
        });
        return false;
      }
    };

    Button.prototype.onDragEnter = function(event) {
      $(event.target).addClass('dragover');
      return false;
    };

    Button.prototype.onDragLeave = function(event) {
      $(event.target).removeClass('dragover');
      return false;
    };

    Button.prototype.onDragOver = function(event) {
      return false;
    };

    Button.prototype.onDrop = function(event) {
      var dt, file, reader, target_img;
      dt = event.originalEvent.dataTransfer;
      target_img = $(event.target);
      target_img.removeClass('dragover');
      if (dt.types[0] !== "Files") {
        return true;
      }
      if (dt.files.length !== 1) {
        event.stopPropagation();
        return false;
      }
      file = dt.files[0];
      if (file.type.indexOf("image") === 0) {
        reader = new FileReader();
        reader.onload = (function(_this) {
          return function(e) {
            var imgsrc, settings;
            imgsrc = e.target.result;
            target_img.css("background", "url(" + imgsrc + ")").css('background-size', "100%");
            settings = new Settings(_this.bookmark);
            return settings.save('rawimg', imgsrc);
          };
        })(this);
        reader.readAsDataURL(file);
      }
      event.stopPropagation();
      return false;
    };

    Button.prototype.applySettings = function() {
      var settings;
      settings = new Settings(this.bookmark);
      this.link.attr('href', this.bookmark.url).attr('class', settings.read('color')).data('pinned', settings.read('pinned'));
      this.img_div.attr('class', "link-image").css('background', "url(" + (settings.read('rawimg')) + ")").css('background-size', "100%");
      this.color_select.val(settings.read('color'));
      return this.pin_check.attr('checked', settings.read('pinned'));
    };

    return Button;

  })();

  Settings = (function() {
    Settings.COLORS = ['silver', 'black', 'purple', 'blue', 'green', 'yellow', 'orange', 'red', 'pink'];

    Settings.initialize = function() {
      if (localStorage['db-version'] !== '2') {
        console.log('Resetting localStorage');
        localStorage.clear();
        return localStorage['db-version'] = '2';
      }
    };

    Settings.fetch = function(bookmark) {
      var settings;
      settings = new Settings(bookmark);
      return settings.fetch();
    };

    function Settings(bookmark1) {
      this.bookmark = bookmark1;
    }

    Settings.prototype.default_data = function() {
      return {
        'id': this.bookmark.id,
        'link': this.bookmark.url
      };
    };

    Settings.prototype.hash = function() {
      return this.bookmark.title;
    };

    Settings.prototype.fetch = function() {
      var data, raw;
      if (this.hash() === '') {
        return this.default_data();
      }
      raw = localStorage[this.hash()];
      if (raw) {
        data = JSON.parse(raw);
        data['id'] = this.bookmark.id;
        return data;
      } else {
        this.fetchFromParse();
        return this.default_data();
      }
    };

    Settings.prototype.fetchFromParse = function() {
      return $.parse.get('bookmarks', {
        where: {
          objectId: this.hash()
        }
      }, function(data) {
        var entry, j, len, ref, results;
        ref = data.results;
        results = [];
        for (j = 0, len = ref.length; j < len; j++) {
          entry = ref[j];
          console.log("Parse data received " + entry.objectId, entry);
          localStorage[entry.objectId] = JSON.stringify(entry);
          results.push(injectBookmark(this.bookmark));
        }
        return results;
      });
    };

    Settings.prototype.read = function(key) {
      var data;
      data = this.fetch();
      return data[key];
    };

    Settings.prototype.save = function(key, value) {
      var data;
      data = this.fetch();
      data[key] = value;
      delete data.id;
      delete data.objectId;
      delete data.createdAt;
      delete data.updatedAt;
      console.log("New data", data);
      return $.parse.post('bookmarks', data, (function(_this) {
        return function(json) {
          console.log("Saved to parse", json);
          chrome.bookmarks.update(_this.bookmark.id, {
            title: json.objectId
          });
          return localStorage[json.objectId] = JSON.stringify(data);
        };
      })(this));
    };

    return Settings;

  })();

  Settings.initialize;

  $.parse.init({
    app_id: "xUAcXfMivxbjqOhtLuX9e0Nz7zO0aL0ieq93swiN",
    rest_key: "tbVr6U9goimUx4m0LHE5B24MtibdCYqiTlSnKyk2"
  });

  $('#purge-storage').click(function() {
    localStorage.clear();
    return false;
  });

  $('#settings-toggle').click(function() {
    $('.settings').toggle();
    return false;
  });

  chrome.storage.sync.get(null, function(data) {
    console.log("Sync get", data);
    return chrome.bookmarks.getTree(function(tree) {
      var mytree;
      mytree = null;
      $.each(tree[0].children[1].children, function(i, subtree) {
        if (subtree.title === 'newtab') {
          return mytree = subtree;
        }
      });
      return $.each(mytree.children, function(i, subtree) {
        var row;
        row = $('<ul>');
        $('body').append(row);
        return $.each(subtree.children, function(i, bookmark) {
          var butt;
          butt = new Button(bookmark);
          return row.append(butt.li);
        });
      });
    });
  });

}).call(this);
